#!/usr/bin/python

'''
Run scripts and install pkgs or profiles at boot and/or login.
'''

##############################################################################
# Copyright 2014, 2015 Joseph Chilcote
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy
#  of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
##############################################################################

__author__ = 'Joseph Chilcote (chilcote@gmail.com)'
__version__ = '2.0.0'

import argparse
import datetime
import FoundationPlist
import logging
import os
import platform
import shutil
import subprocess
import time
from stat import S_IXOTH, S_IWOTH
from SystemConfiguration import SCDynamicStoreCopyConsoleUser


outset_dir = '/usr/local/outset'
login_every_dir = os.path.join(outset_dir, 'login-every')
login_once_dir = os.path.join(outset_dir, 'login-once')
logout_every_dir = os.path.join(outset_dir, 'logout-every')
logout_once_dir = os.path.join(outset_dir, 'logout-once')
on_demand_dir = os.path.join(outset_dir, 'on-demand')
boot_once_dir = os.path.join(outset_dir, 'boot-once')
boot_every_dir = os.path.join(outset_dir, 'boot-every')
share_dir = os.path.join(outset_dir, 'share')
outset_preferences = os.path.join(share_dir, 'com.chilcote.outset.plist')
on_demand_trigger = '/private/tmp/.com.github.outset.ondemand.launchd'
cleanup_trigger = '/private/tmp/.com.github.outset.cleanup.launchd'
loginwindow_preferences = '/Library/Preferences/com.apple.loginwindow.plist'

if os.geteuid() == 0:
    log_file = '/var/log/outset.log'
else:
    if not os.path.exists(os.path.expanduser('~/Library/Logs')):
        os.makedirs(os.path.expanduser('~/Library/Logs'))
    log_file = os.path.expanduser('~/Library/Logs/outset.log')
    run_once_plist = os.path.expanduser('~/Library/Preferences/com.github.outset.once.plist')

logging.basicConfig(format='%(asctime)s - %(levelname)s: %(message)s',
                    datefmt='%m/%d/%Y %I:%M:%S %p',
                    level=logging.DEBUG,
                    filename=log_file)

def network_up():
    '''Returns True if network is up'''
    cmd = ['/sbin/ifconfig', '-a', 'inet']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    for line in str(out).splitlines():
        if 'inet' in line:
            if not line.split()[1] in ['127.0.0.1', '0.0.0.0']:
                return True
    return False

def wait_for_network(timeout):
    '''Waits for a valid IP before continuing'''
    for x in xrange(timeout):
        if network_up():
            return True
        else:
            logging.info('Waiting for network')
            time.sleep(10)

def disable_loginwindow():
    '''Disables the loginwindow process'''
    logging.info('Disabling loginwindow process')
    cmd = ['/bin/launchctl', 'unload',
           '/System/Library/LaunchDaemons/com.apple.loginwindow.plist']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()

def enable_loginwindow():
    '''Enables the loginwindow process'''
    logging.info('Enabling loginwindow process')
    cmd = ['/bin/launchctl', 'load',
           '/System/Library/LaunchDaemons/com.apple.loginwindow.plist']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()

def get_hardwaremodel():
    '''Returns the hardware model of the Mac'''
    cmd = ['/usr/sbin/sysctl', '-n', 'hw.model']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    return out.strip()

def get_serialnumber():
    '''Returns the serial number of the Mac'''
    cmd = "/usr/sbin/ioreg -c \"IOPlatformExpertDevice\" | awk -F '\"' \
                                    '/IOPlatformSerialNumber/ {print $4}'"
    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    return out.strip()

def get_buildversion():
    '''Returns the os build version of the Mac'''
    cmd = ['/usr/sbin/sysctl', '-n', 'kern.osversion']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    return out.strip()

def get_osversion():
    '''Returns the os x version of this Mac'''
    return platform.mac_ver()[0]

def sys_report():
    '''Logs system information to log file'''
    logging.debug('Model: %s', get_hardwaremodel())
    logging.debug('Serial: %s', get_serialnumber())
    logging.debug('OS: %s', get_osversion())
    logging.debug('Build: %s', get_buildversion())

def cleanup(pathname):
    '''Deletes given script'''
    try:
        os.remove(pathname)
    except:
        shutil.rmtree(pathname)

def mount_dmg(dmg):
    '''Attaches dmg'''
    dmg_path = os.path.join(dmg)
    cmd = ['hdiutil', 'attach', '-nobrowse', '-noverify', '-noautoopen', dmg_path]
    logging.info('Attaching %s', dmg_path)
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    return out.split('\n')[-2].split('\t')[-1]

def detach_dmg(dmg_mount):
    '''Detaches dmg'''
    logging.info('Detaching %s', dmg_mount)
    cmd = ['hdiutil', 'detach', '-force', dmg_mount]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    if err:
        logging.error('Unable to detach %s: %s', dmg_mount, err)

def check_perms(pathname):
    mode = os.stat(pathname).st_mode
    owner = os.stat(pathname).st_uid
    if pathname.lower().endswith(('pkg', 'mpkg', 'dmg', 'mobileconfig')):
        if owner == 0 and not (mode & S_IWOTH):
            return True
    else:
        if owner == 0 and (mode & S_IXOTH) and not (mode & S_IWOTH):
            return True
    return False

def install_package(pkg):
    '''Installs pkg onto boot drive'''
    if pkg.lower().endswith('dmg'):
        dmg_mount = mount_dmg(pkg)
        for f in os.listdir(dmg_mount):
            if f.lower().endswith(('pkg', 'mpkg')):
                pkg_to_install = os.path.join(dmg_mount, f)
    elif pkg.lower().endswith(('pkg', 'mpkg')):
        dmg_mount = False
        pkg_to_install = pkg
    logging.info('Installing %s', pkg_to_install)
    cmd = ['/usr/sbin/installer', '-pkg', pkg_to_install, '-target', '/',]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    if err:
        logging.info('Failure installing %s: %s', pkg_to_install, err)
    if dmg_mount:
        time.sleep(5)
        detach_dmg(dmg_mount)

def install_profile(pathname):
    '''Install mobileconfig located at given pathname'''
    cmd = ['/usr/bin/profiles', '-IF', pathname]
    try:
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        logging.info('Installing profile %s', pathname)
        (out, err) = proc.communicate()
        if err:
            logging.error('Failure processing %s: %s', pathname, err)
            return False
    except OSError as err:
        logging.error('Failure processing %s: %s', pathname, err)
        return False
    return True

def run_script(pathname):
    '''Runs script located at given pathname'''
    try:
        proc = subprocess.Popen(pathname, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        logging.info('Processing %s', pathname)
        (out, err) = proc.communicate()
        if err and proc.returncode == 0:
            logging.info('Output from %s on stderr but it still ran successfully: %s', pathname, err)
        elif proc.returncode > 0:
            logging.error('Failure processing %s: %s', pathname, err)
            return False
    except OSError as err:
        logging.error('Failure processing %s: %s', pathname, err)
        return False
    return True

def process_items(path, delete_items=False, once=False):
    '''Processes scripts/packages to run'''

    if not os.path.exists(path):
        logging.error('%s does not exist. Exiting', path)
        exit(1)

    packages = []
    scripts = []
    profiles = []
    d = {}

    for f in os.listdir(path):
        pathname = os.path.join(path, f)
        if check_perms(pathname):
            if pathname.lower().endswith(('pkg', 'mpkg', 'dmg')):
                packages.append(pathname)
            elif pathname.lower().endswith('mobileconfig'):
                profiles.append(pathname)
            else:
                scripts.append(pathname)
        else:
            logging.error('Bad permissions: %s', pathname)

    if once:
        try:
            d = FoundationPlist.readPlist(run_once_plist)
        except FoundationPlist.FoundationPlistException:
            d = {}

    for package in packages:
        install_package(package)
        if delete_items: cleanup(package)

    for profile in profiles:
        if once:
            if profile not in d:
                if install_profile(profile):
                    d[profile] = datetime.datetime.now()
        else:
            task = install_profile(profile)
        if delete_items: cleanup(profile)

    for script in scripts:
        if once:
            if script not in d:
                if run_script(script):
                    d[script] = datetime.datetime.now()
        else:
            task = run_script(script)
        if delete_items: cleanup(script)

    if d:
        FoundationPlist.writePlist(d, run_once_plist)

def main():
    '''Main method'''

    parser = argparse.ArgumentParser(description='This script automatically \
            processes packages and scripts at first boot \
            and/or each (subsequent) user login.')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--boot', action='store_true')
    group.add_argument('--login', action='store_true')
    group.add_argument('--logout', action='store_true')
    group.add_argument('--on-demand', action='store_true')
    group.add_argument('--login-every', action='store_true')
    group.add_argument('--login-once', action='store_true')
    group.add_argument('--logout-every', action='store_true')
    group.add_argument('--logout-once', action='store_true')
    group.add_argument('--cleanup', action='store_true')
    group.add_argument('--version', action='store_true')
    group.add_argument('--add-ignored-user', action='append',
            help='Add user to ignored list')
    group.add_argument('--remove-ignored-user', action='append',
            help='Remove user from ignored list')
    args = parser.parse_args()

    loginwindow = True
    console_user = SCDynamicStoreCopyConsoleUser(None, None, None)[0]
    network_wait = True
    network_timeout = 180
    ignored_users = []
    continue_firstboot = True
    prefs = {}

    if not os.path.exists(share_dir):
        os.makedirs(share_dir)

    if os.path.exists(outset_preferences):
        prefs = FoundationPlist.readPlist(outset_preferences)
        if prefs.get('wait_for_network'):
            network_wait = prefs['wait_for_network']
        if prefs.get('network_timeout'):
            network_timeout = prefs['network_timeout']
        if prefs.get('ignored_users'):
            ignored_users = prefs['ignored_users']

    if args.boot:
        if os.listdir(boot_once_dir):
            if network_wait:
                loginwindow = False
                disable_loginwindow()
                continue_firstboot = True if wait_for_network(timeout=network_timeout//10) else False
            if continue_firstboot:
                sys_report()
                process_items(boot_once_dir, delete_items=True)
            else:
                logging.error('Unable to connect to network. Skipping boot-once scripts...')
            if not loginwindow:
                enable_loginwindow()
        if os.listdir(boot_every_dir):
            process_items(boot_every_dir)
        logging.info('Boot processing complete')

    if args.login:
        if console_user not in ignored_users:
            if os.listdir(login_every_dir):
                process_items(login_every_dir)
            if os.listdir(login_once_dir):
                process_items(login_once_dir, once=True)
        else:
            logging.info('Skipping login scripts for user %s', console_user)

    if args.logout:
        # Logout is really login window. Check both the last username and the last user state is 'loggedOut'
        current_loginwindow = FoundationPlist.readPlist(loginwindow_preferences)
        lastuser = current_loginwindow['lastUser']
        console_user = current_loginwindow['lastUserName']
        if lastuser == 'loggedOut':
            if console_user not in ignored_users:
                if os.listdir(logout_every_dir):
                    process_items(logout_every_dir)
                if os.listdir(logout_once_dir):
                    process_items(logout_once_dir, once=True)
            else:
                logging.info('Skipping logout scripts for user %s', console_user)
        else:
            logging.info('Skipping logout script because login state is %s and should be loggedOut', lastuser)

    if args.on_demand:
        if os.listdir(on_demand_dir):
            if console_user not in ('root', 'loginwindow'):
                current_user = os.environ['USER']
                if console_user == current_user:
                    process_items(on_demand_dir)
                else:
                    logging.info('User %s is not the current console user. Skipping on-demand run.', current_user)
            else:
                logging.info('No current user session. Skipping on-demand run.')
        open(cleanup_trigger, 'w').close()
        time.sleep(0.5)
        if os.path.exists(cleanup_trigger):
            cleanup(cleanup_trigger)

    if args.login_every:
        if console_user not in ignored_users:
            if os.listdir(login_every_dir):
                process_items(login_every_dir)

    if args.login_once:
        if console_user not in ignored_users:
            if os.listdir(login_once_dir):
                process_items(login_once_dir, once=True)

    if args.logout_every:
        if console_user not in ignored_users:
            if os.listdir(logout_every_dir):
                process_items(logout_every_dir)

    if args.logout_once:
        if console_user not in ignored_users:
            if os.listdir(logout_once_dir):
                process_items(logout_once_dir, once=True)

    if args.cleanup:
        logging.info('Cleaning up on-demand directory.')
        if os.path.exists(on_demand_trigger):
            cleanup(on_demand_trigger)
        if os.listdir(on_demand_dir):
            for f in os.listdir(on_demand_dir):
                cleanup(os.path.join(on_demand_dir, f))
        time.sleep(5)

    if args.add_ignored_user:
        users_to_add = args.add_ignored_user
        if not prefs.get('ignored_users'):
            prefs['ignored_users'] = []
        prefs['ignored_users'].extend(users_to_add)
        FoundationPlist.writePlist(prefs, outset_preferences)

    if args.remove_ignored_user:
        users_to_remove = args.remove_ignored_user
        if prefs.get('ignored_users'):
            for user in users_to_remove:
                if user in prefs['ignored_users']:
                    prefs['ignored_users'].remove(user)
            FoundationPlist.writePlist(prefs, outset_preferences)

    if args.version:
        print __version__

if __name__ == '__main__':
    main()